---
description: 
globs: 
alwaysApply: false
---
# Zenn記事作成ガイドライン

## 記事のフロントマター

すべての記事は以下のフロントマターフォーマットに従ってください：

```md
---
title: "記事のタイトル"
emoji: "🔖" # 記事を表す絵文字
type: "tech" # tech: 技術記事 / idea: アイデア記事
topics: ["React", "TypeScript"] # タグとして表示されるキーワード
published: true # 公開設定（falseにすると下書き）
---
```

## 記事作成基本コマンド

新しい記事を作成する：
```
npm run new
```

または：
```
npx zenn new:article --slug 記事のスラッグ名
```

プレビューを開始する：
```
npm run preview
```

## 記事構成のベストプラクティス

1. **見出しの階層構造を守る**：
   - h1（#）は記事のメインタイトルとして1つだけ使用
   - h2（##）からh4（####）を適切に使用して階層構造を作る
   - 見出しの番号付けは不要

2. **コードブロックの言語指定**：
   コードブロックには必ず言語を指定する
   ```ts
   // TypeScriptのコード例
   const value: string = "Hello World";
   ```

3. **画像の挿入**：
   - 画像は `/images/` ディレクトリに保存する
   - 記事中での参照は以下のように行う
   ```md
   ![代替テキスト](mdc:images/記事スラッグ/画像ファイル名.png)
   ```

4. **スタイルの一貫性**：
   - 技術用語は正確に表記する（例：TypeScript, JavaScript, React）
   - 日本語と英語の間には半角スペースを入れる
   - 箇条書きは統一した記号（`-` または `*`）を使用する

5. **参考資料の引用**：
   記事の最後に参考にした資料や公式ドキュメントへのリンクを明記する

## 推奨記事構成

1. **イントロダクション**：記事で何を説明するのか、読者が何を得られるのかを簡潔に説明
2. **前提条件/環境**：必要な知識や環境を明記
3. **本文**：概念説明、コード例、実装手順など
4. **まとめ**：記事の要点を箇条書きでまとめる
5. **参考資料**：参考にした資料のリンク

## Zenn独自の記法

1. **メッセージアラート**：
   ```md
   :::message
   これは情報メッセージです
   :::

   :::message alert
   これは警告メッセージです
   :::
   ```

2. **アコーディオン（折りたたみ要素）**：
   ```md
   :::details タイトル
   表示したい内容
   :::
   ```
